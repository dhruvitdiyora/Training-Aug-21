// <auto-generated />
using System;
using CharityAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CharityAPI.Migrations.CharityAPI
{
    [DbContext(typeof(CharityAPIContext))]
    [Migration("20211220092713_charity")]
    partial class charity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CharityAPI.Models.Admins", b =>
                {
                    b.Property<long>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsPublished")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("AdminId");

                    b.HasIndex("EmailAddress")
                        .IsUnique()
                        .HasName("UQ__Admins__49A14740F2462EB0");

                    b.HasIndex("PasswordHash")
                        .IsUnique()
                        .HasName("UQ__Admins__D60E46A21E3C5CB5");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasName("UQ__Admins__C9F2845604A6A39E");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("CharityAPI.Models.CharityEvent", b =>
                {
                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("EventBannerUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EventEndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<long>("EventOrganiserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EventStartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPublished")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<long>("PincodeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("EventId");

                    b.HasIndex("EventOrganiserId");

                    b.HasIndex("PincodeId");

                    b.ToTable("CharityEvent");
                });

            modelBuilder.Entity("CharityAPI.Models.CharityEventInteract", b =>
                {
                    b.Property<long>("CharityEventInteractId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsGoing")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInterested")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPublished")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("CharityEventInteractId");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("CharityEventInteract");
                });

            modelBuilder.Entity("CharityAPI.Models.CharityEventOrganiser", b =>
                {
                    b.Property<long>("CharityEventOrganiserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventOrganiserId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsPublished")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("CharityEventOrganiserId");

                    b.HasIndex("EventId");

                    b.HasIndex("EventOrganiserId", "EventId")
                        .IsUnique()
                        .HasName("UK_CharityEventOrganiserEventNOrganiser");

                    b.ToTable("CharityEventOrganiser");
                });

            modelBuilder.Entity("CharityAPI.Models.CharityEventPost", b =>
                {
                    b.Property<long>("CharityEventPostId")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsPublished")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("PostUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("CharityEventPostId");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("CharityEventPost");
                });

            modelBuilder.Entity("CharityAPI.Models.CharityEventPostLike", b =>
                {
                    b.Property<long>("CharityEventPostLikeId")
                        .HasColumnType("bigint");

                    b.Property<long>("CharityEventPostId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<long>("DisLike")
                        .HasColumnType("bigint");

                    b.Property<long>("Likes")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("CharityEventPostLikeId");

                    b.HasIndex("UserId");

                    b.HasIndex("CharityEventPostId", "UserId")
                        .IsUnique()
                        .HasName("UK_CharityEventPostUser");

                    b.ToTable("CharityEventPostLike");
                });

            modelBuilder.Entity("CharityAPI.Models.Cities", b =>
                {
                    b.Property<long>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsPublished")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<long>("StateId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("CityId");

                    b.HasIndex("StateId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("CharityAPI.Models.ClusterLocations", b =>
                {
                    b.Property<long>("ClusterLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsPublished")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("Locations")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<long>("PeopleCount")
                        .HasColumnType("bigint");

                    b.Property<long>("PincodeId")
                        .HasColumnType("bigint");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<long>("RequirementTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("StateId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("ClusterLocationId")
                        .HasName("PK_Cluster");

                    b.HasIndex("CityId");

                    b.HasIndex("PincodeId");

                    b.HasIndex("PostId");

                    b.HasIndex("RequirementTypeId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserId");

                    b.ToTable("ClusterLocations");
                });

            modelBuilder.Entity("CharityAPI.Models.OrganisationData", b =>
                {
                    b.Property<long>("OrganisationDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsPublished")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("OrganisationAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganisationContactNo")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("OrganisationLogoUrl")
                        .IsRequired()
                        .HasColumnName("OrganisationLogoURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganisationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<long>("OrganisationUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("OrganisationDataId");

                    b.HasIndex("OrganisationUserId");

                    b.ToTable("OrganisationData");
                });

            modelBuilder.Entity("CharityAPI.Models.Organisations", b =>
                {
                    b.Property<long>("OrganisationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsPublished")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<long?>("Otp")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("OtpCreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("OrganisationId");

                    b.HasIndex("EmailAddress")
                        .IsUnique()
                        .HasName("UQ__Organisa__49A14740F5747692");

                    b.HasIndex("PasswordHash")
                        .IsUnique()
                        .HasName("UQ__Organisa__D60E46A20B37A83E");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasName("UQ__Organisa__C9F28456FBA0EFCA");

                    b.ToTable("Organisations");
                });

            modelBuilder.Entity("CharityAPI.Models.Pincode", b =>
                {
                    b.Property<long>("PincodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("District")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool?>("IsPublished")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<long>("Pincode1")
                        .HasColumnName("Pincode")
                        .HasColumnType("bigint");

                    b.Property<string>("PostOfficeName")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<long>("StateId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("PincodeId");

                    b.HasIndex("CityId");

                    b.HasIndex("StateId");

                    b.ToTable("Pincode");
                });

            modelBuilder.Entity("CharityAPI.Models.Post", b =>
                {
                    b.Property<long>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CloseAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<long>("HelpRequiredCount")
                        .HasColumnType("bigint");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnName("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPublished")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(12, 9)");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(12, 9)");

                    b.Property<long>("PincodeId")
                        .HasColumnType("bigint");

                    b.Property<string>("PostDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("RequirementTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("StateId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("PostId");

                    b.HasIndex("CityId");

                    b.HasIndex("PincodeId");

                    b.HasIndex("RequirementTypeId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("CharityAPI.Models.RequirementType", b =>
                {
                    b.Property<long>("RequirementTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsPublished")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("RequirementTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("RequirementTypeId");

                    b.ToTable("RequirementType");
                });

            modelBuilder.Entity("CharityAPI.Models.Spam", b =>
                {
                    b.Property<long>("SpamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsPublished")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("SpamId");

                    b.HasIndex("UserId");

                    b.HasIndex("PostId", "UserId")
                        .IsUnique()
                        .HasName("UK_SpamUser");

                    b.ToTable("Spam");
                });

            modelBuilder.Entity("CharityAPI.Models.States", b =>
                {
                    b.Property<long>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsPublished")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("StateId");

                    b.HasIndex("StateName")
                        .IsUnique()
                        .HasName("UQ__States__554763152132CFC1");

                    b.ToTable("States");
                });

            modelBuilder.Entity("CharityAPI.Models.Urgency", b =>
                {
                    b.Property<long>("UrgencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsPublished")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("UrgencyId");

                    b.HasIndex("UserId");

                    b.HasIndex("PostId", "UserId")
                        .IsUnique()
                        .HasName("UK_UrgencyUser");

                    b.ToTable("Urgency");
                });

            modelBuilder.Entity("CharityAPI.Models.UserData", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<bool?>("IsPublished")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<long>("PincodeId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StateId")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalPostCount")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UserDescription")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<long>("Users")
                        .HasColumnType("bigint");

                    b.HasKey("UserId")
                        .HasName("PK__UserData__1788CC4C1C5A4F30");

                    b.HasIndex("CityId");

                    b.HasIndex("EmailAddress")
                        .IsUnique()
                        .HasName("UQ__UserData__49A1474046C79309");

                    b.HasIndex("PincodeId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasName("UQ__UserData__C9F28456473A8913");

                    b.HasIndex("Users")
                        .IsUnique()
                        .HasName("UQ__UserData__64B85EBE6FC9070D");

                    b.ToTable("UserData");
                });

            modelBuilder.Entity("CharityAPI.Models.Users", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsPublished")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<long?>("Otp")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("OtpCreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("UserId");

                    b.HasIndex("EmailAddress")
                        .IsUnique()
                        .HasName("UQ__Users__49A14740F0748FF3");

                    b.HasIndex("PasswordHash")
                        .IsUnique()
                        .HasName("UQ__Users__D60E46A24297F69A");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasName("UQ__Users__C9F28456EE2EEC8C");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CharityAPI.Models.Volunteer", b =>
                {
                    b.Property<long>("VolunteerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsPublished")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<long>("VolunteerUserId")
                        .HasColumnType("bigint");

                    b.HasKey("VolunteerId");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("VolunteerUserId");

                    b.ToTable("Volunteer");
                });

            modelBuilder.Entity("CharityAPI.Models.WebApiExceptionLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Message")
                        .HasColumnType("ntext");

                    b.Property<int?>("SiteId")
                        .HasColumnType("int");

                    b.Property<string>("StackTrace")
                        .HasColumnType("ntext");

                    b.HasKey("LogId")
                        .HasName("PK__WebApiEx__5E548648866B858C");

                    b.ToTable("WebApiExceptionLog");
                });

            modelBuilder.Entity("CharityAPI.Models.WebApiRequestLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ControllerName")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LogDescription")
                        .HasColumnType("ntext");

                    b.Property<string>("RequestUri")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int?>("SiteId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("Timespan")
                        .HasColumnType("time");

                    b.HasKey("LogId")
                        .HasName("PK__WebApiRe__5E54864822104AD2");

                    b.ToTable("WebApiRequestLog");
                });

            modelBuilder.Entity("CharityAPI.Models.CharityEvent", b =>
                {
                    b.HasOne("CharityAPI.Models.OrganisationData", "EventOrganiser")
                        .WithMany("CharityEvent")
                        .HasForeignKey("EventOrganiserId")
                        .HasConstraintName("FK_CharityOrganisationId")
                        .IsRequired();

                    b.HasOne("CharityAPI.Models.Pincode", "Pincode")
                        .WithMany("CharityEvent")
                        .HasForeignKey("PincodeId")
                        .HasConstraintName("FK_CharityEventPincodeId")
                        .IsRequired();
                });

            modelBuilder.Entity("CharityAPI.Models.CharityEventInteract", b =>
                {
                    b.HasOne("CharityAPI.Models.CharityEvent", "Event")
                        .WithMany("CharityEventInteract")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_CharityEventInteractEvent")
                        .IsRequired();

                    b.HasOne("CharityAPI.Models.UserData", "User")
                        .WithMany("CharityEventInteract")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CharityEventInteractUser")
                        .IsRequired();
                });

            modelBuilder.Entity("CharityAPI.Models.CharityEventOrganiser", b =>
                {
                    b.HasOne("CharityAPI.Models.CharityEvent", "Event")
                        .WithMany("CharityEventOrganiser")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_CharityEventOrganiserEvent")
                        .IsRequired();

                    b.HasOne("CharityAPI.Models.OrganisationData", "EventOrganiser")
                        .WithMany("CharityEventOrganiser")
                        .HasForeignKey("EventOrganiserId")
                        .HasConstraintName("FK_CharityEventOrganiserEventOrganiser")
                        .IsRequired();
                });

            modelBuilder.Entity("CharityAPI.Models.CharityEventPost", b =>
                {
                    b.HasOne("CharityAPI.Models.CharityEvent", "Event")
                        .WithMany("CharityEventPost")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_CharityEventPostEvent")
                        .IsRequired();

                    b.HasOne("CharityAPI.Models.UserData", "User")
                        .WithMany("CharityEventPost")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CharityEventPostUser")
                        .IsRequired();
                });

            modelBuilder.Entity("CharityAPI.Models.CharityEventPostLike", b =>
                {
                    b.HasOne("CharityAPI.Models.CharityEventPost", "CharityEventPost")
                        .WithMany("CharityEventPostLike")
                        .HasForeignKey("CharityEventPostId")
                        .HasConstraintName("FK_CharityEventPost")
                        .IsRequired();

                    b.HasOne("CharityAPI.Models.UserData", "User")
                        .WithMany("CharityEventPostLike")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CharityEventLikeByUser")
                        .IsRequired();
                });

            modelBuilder.Entity("CharityAPI.Models.Cities", b =>
                {
                    b.HasOne("CharityAPI.Models.States", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .HasConstraintName("FK_Cities")
                        .IsRequired();
                });

            modelBuilder.Entity("CharityAPI.Models.ClusterLocations", b =>
                {
                    b.HasOne("CharityAPI.Models.Cities", "City")
                        .WithMany("ClusterLocations")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_ClusterCity")
                        .IsRequired();

                    b.HasOne("CharityAPI.Models.Pincode", "Pincode")
                        .WithMany("ClusterLocations")
                        .HasForeignKey("PincodeId")
                        .HasConstraintName("FK_ClusterPin")
                        .IsRequired();

                    b.HasOne("CharityAPI.Models.Post", "Post")
                        .WithMany("ClusterLocations")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_ClusterPostId")
                        .IsRequired();

                    b.HasOne("CharityAPI.Models.RequirementType", "RequirementType")
                        .WithMany("ClusterLocations")
                        .HasForeignKey("RequirementTypeId")
                        .HasConstraintName("FK_ClusterControId")
                        .IsRequired();

                    b.HasOne("CharityAPI.Models.States", "State")
                        .WithMany("ClusterLocations")
                        .HasForeignKey("StateId")
                        .HasConstraintName("FK_ClusterState")
                        .IsRequired();

                    b.HasOne("CharityAPI.Models.UserData", "User")
                        .WithMany("ClusterLocations")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_ClusterUserId")
                        .IsRequired();
                });

            modelBuilder.Entity("CharityAPI.Models.OrganisationData", b =>
                {
                    b.HasOne("CharityAPI.Models.Organisations", "OrganisationUser")
                        .WithMany("OrganisationData")
                        .HasForeignKey("OrganisationUserId")
                        .HasConstraintName("FK_OrgUser")
                        .IsRequired();
                });

            modelBuilder.Entity("CharityAPI.Models.Pincode", b =>
                {
                    b.HasOne("CharityAPI.Models.Cities", "City")
                        .WithMany("Pincode")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_PincodeCity")
                        .IsRequired();

                    b.HasOne("CharityAPI.Models.States", "State")
                        .WithMany("Pincode")
                        .HasForeignKey("StateId")
                        .HasConstraintName("FK_PincodeState")
                        .IsRequired();
                });

            modelBuilder.Entity("CharityAPI.Models.Post", b =>
                {
                    b.HasOne("CharityAPI.Models.Cities", "City")
                        .WithMany("Post")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_PostCity")
                        .IsRequired();

                    b.HasOne("CharityAPI.Models.Pincode", "Pincode")
                        .WithMany("Post")
                        .HasForeignKey("PincodeId")
                        .HasConstraintName("FK_PostPin")
                        .IsRequired();

                    b.HasOne("CharityAPI.Models.RequirementType", "RequirementType")
                        .WithMany("Post")
                        .HasForeignKey("RequirementTypeId")
                        .HasConstraintName("FK_RequirementType")
                        .IsRequired();

                    b.HasOne("CharityAPI.Models.States", "State")
                        .WithMany("Post")
                        .HasForeignKey("StateId")
                        .HasConstraintName("FK_PostState")
                        .IsRequired();

                    b.HasOne("CharityAPI.Models.UserData", "User")
                        .WithMany("Post")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_PostUserId")
                        .IsRequired();
                });

            modelBuilder.Entity("CharityAPI.Models.Spam", b =>
                {
                    b.HasOne("CharityAPI.Models.Post", "Post")
                        .WithMany("Spam")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_SpamPost")
                        .IsRequired();

                    b.HasOne("CharityAPI.Models.UserData", "User")
                        .WithMany("Spam")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_SpamUser")
                        .IsRequired();
                });

            modelBuilder.Entity("CharityAPI.Models.Urgency", b =>
                {
                    b.HasOne("CharityAPI.Models.Post", "Post")
                        .WithMany("Urgency")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_UrgentPost")
                        .IsRequired();

                    b.HasOne("CharityAPI.Models.UserData", "User")
                        .WithMany("Urgency")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UrgentUser")
                        .IsRequired();
                });

            modelBuilder.Entity("CharityAPI.Models.UserData", b =>
                {
                    b.HasOne("CharityAPI.Models.Cities", "City")
                        .WithMany("UserData")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_UserCity")
                        .IsRequired();

                    b.HasOne("CharityAPI.Models.Pincode", "Pincode")
                        .WithMany("UserData")
                        .HasForeignKey("PincodeId")
                        .HasConstraintName("FK_UserPin")
                        .IsRequired();

                    b.HasOne("CharityAPI.Models.States", "State")
                        .WithMany("UserData")
                        .HasForeignKey("StateId")
                        .HasConstraintName("FK_UserState")
                        .IsRequired();

                    b.HasOne("CharityAPI.Models.Users", "UsersNavigation")
                        .WithOne("UserData")
                        .HasForeignKey("CharityAPI.Models.UserData", "Users")
                        .HasConstraintName("FK_Users")
                        .IsRequired();
                });

            modelBuilder.Entity("CharityAPI.Models.Volunteer", b =>
                {
                    b.HasOne("CharityAPI.Models.OrganisationData", "Organisation")
                        .WithMany("Volunteer")
                        .HasForeignKey("OrganisationId")
                        .HasConstraintName("FK_VolunteerOrg")
                        .IsRequired();

                    b.HasOne("CharityAPI.Models.UserData", "VolunteerUser")
                        .WithMany("Volunteer")
                        .HasForeignKey("VolunteerUserId")
                        .HasConstraintName("FK_Volunteer")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
